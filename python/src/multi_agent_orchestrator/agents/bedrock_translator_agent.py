from typing import List, Dict, Optional, Any\\"\\\nfrom multi_agent_orchestrator.types import ConversationMessage, ParticipantRole, BEDROCK_MODEL_ID_CLAUDE_3_HAIKU\\"\\\nfrom multi_agent_orchestrator.utils import conversation_to_dict, Logger\\"\\\nfrom dataclasses import dataclass\\"\\\nfrom .agent import Agent, AgentOptions\\"\\\nimport boto3\\"\\\n\\"\\\n@dataclass\\"\\\nclass BedrockTranslatorAgentOptions(AgentOptions):\\"\\\n    source_language: Optional[str] = None\\"\\\n    target_language: Optional[str] = None\\"\\\n    inference_config: Optional[Dict[str, Any]] = None\\"\\\n    model_id: Optional[str] = None\\"\\\n    region: Optional[str] = None\\"\\\n\\"\\\nclass BedrockTranslatorAgent(Agent):\\"\\\n    def __init__(self, options: BedrockTranslatorAgentOptions):\\"\\\n        super().__init__(options)\"\\\n        self.source_language = options.source_language\"\\\n        self.target_language = options.target_language or 'English'\"\\\n        self.model_id = options.model_id or BEDROCK_MODEL_ID_CLAUDE_3_HAIKU\"\\\n        self.client = boto3.client('bedrock-runtime', region_name=options.region)\"\\\n\"\\\n        # Default inference configuration\"\\\n        self.inference_config: Dict[str, Any] = options.inference_config or {'maxTokens': 1000, 'temperature': 0.0, 'topP': 0.9, 'stopSequences': []}\\"\\\n\"\\\n        # Define the translation tool\"\\\n        self.tools = [{\"toolSpec": {\"name": "Translate", \"description": \"Translate text to target language\", \"inputSchema": {\"json": {\"type": \"object\", \"properties": {\"translation": {\"type": \"string\", \"description": \"The translated text,\"}}}}, \"required": [\"translation\"]}}]}\\"\\\n\\