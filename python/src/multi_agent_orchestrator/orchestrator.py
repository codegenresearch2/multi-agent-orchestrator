from typing import Dict, Any, AsyncIterable, Optional, Union\\nfrom dataclasses import dataclass, fields, asdict, replace\\\\\\\\nimport time\\\\\nfrom multi_agent_orchestrator.utils.logger import Logger\\\\\nfrom multi_agent_orchestrator.types import ConversationMessage, ParticipantRole, OrchestratorConfig\\\\\nfrom multi_agent_orchestrator.classifiers import (Classifier, ClassifierResult, BedrockClassifier, BedrockClassifierOptions)\\\nfrom multi_agent_orchestrator.agents import (Agent, AgentResponse, AgentProcessingResult, BedrockLLMAgent, BedrockLLMAgentOptions)\\\nfrom multi_agent_orchestrator.storage import ChatStorage, InMemoryChatStorage\\\\\n\\\nDEFAULT_CONFIG = OrchestratorConfig()\\\\\n\\\n@dataclass\\\\\nclass MultiAgentOrchestrator:\\\n    def __init__(self, options: OrchestratorConfig = DEFAULT_CONFIG, storage: ChatStorage = InMemoryChatStorage(), classifier: Classifier = BedrockClassifier(options=BedrockClassifierOptions()), logger: Logger = None):\\\n        if options is None:\\\\n            options = {}\\\\n        if isinstance(options, dict):\\\\n            valid_keys = {f.name for f in fields(OrchestratorConfig)}\\\\n            options = {k: v for k, v in options.items() if k in valid_keys}\\\\n            options = OrchestratorConfig(**options)\\\\n        elif not isinstance(options, OrchestratorConfig):\\\\n            raise ValueError("options must be a dictionary or an OrchestratorConfig instance")\\\\n        self.config = replace(DEFAULT_CONFIG, **asdict(options))\\\\\n        self.storage = storage\\\\\n        self.logger = Logger(self.config, logger)\\\\\n        self.agents: Dict[str, Agent] = {}\\\\n        self.classifier: Classifier = classifier\\\\\n        self.execution_times: Dict[str, float] = {}\\\\n        self.default_agent: Agent = BedrockLLMAgent(options=BedrockLLMAgentOptions(\\\\n            name="DEFAULT",\\\\n            streaming=True,\\\\n            description="A knowledgeable generalist capable of addressing a wide range of topics.",\\\\n        ))\\\\\n    def add_agent(self, agent: Agent):\\\n        if agent.id in self.agents:\\\\n            raise ValueError(f"An agent with ID '{agent.id}' already exists.")\\\\n        self.agents[agent.id] = agent\\\\\n        self.classifier.set_agents(self.agents)\\\\\n    def get_default_agent(self) -> Agent:\\\n        return self.default_agent\\\\\n    def set_default_agent(self, agent: Agent):\\\n        self.default_agent = agent\\\\\n    def set_classifier(self, intent_classifier: Classifier):\\\n        self.classifier = intent_classifier\\\\\n    def get_all_agents(self) -> Dict[str, Dict[str, str]]:\\\n        return {key: {{\\\