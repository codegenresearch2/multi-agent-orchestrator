from typing import List, Dict, Optional\"import time\\"import boto3\\"from multi_agent_orchestrator.storage import ChatStorage\\"from multi_agent_orchestrator.types import ConversationMessage, TimestampedMessage, ParticipantRole\\"from multi_agent_orchestrator.utils import Logger, conversation_to_dict\\"\"class DynamoDbChatStorage(ChatStorage):\\"    def __init__(self, table_name: str, region: str, ttl_key: Optional[str] = None, ttl_duration: int = 3600):\\"        super().__init__()\\"        self.table_name = table_name\\"        self.ttl_key = ttl_key\\"        self.ttl_duration = ttl_duration\\"        self.dynamodb = boto3.resource('dynamodb', region_name=region)\"        self.table = self.dynamodb.Table(table_name)\"\\"    async def save_chat_message(self, user_id: str, session_id: str, agent_id: str, new_message: ConversationMessage, max_history_size: Optional[int] = None) -> List[ConversationMessage]:\\"        key = self._generate_key(user_id, session_id, agent_id)\\"        existing_conversation = await self.fetch_chat_with_timestamp(user_id, session_id, agent_id)\\"\\"        if self.is_consecutive_message(existing_conversation, new_message):\\"            Logger.debug(f'> Consecutive {new_message.role} message detected for agent {agent_id}. Not saving.')\\"            return existing_conversation\\"\\"        timestamped_message = TimestampedMessage(\"            role=new_message.role,\\"            content=new_message.content,\\"            timestamp=int(time.time() * 1000)\\")\\"        existing_conversation.append(timestamped_message)\\"        trimmed_conversation = self.trim_conversation(existing_conversation, max_history_size)\\"\\"        item = {\"PK": user_id,\\"SK": key,\\"conversation": conversation_to_dict(trimmed_conversation)\"\\"        if self.ttl_key:\\"            item[self.ttl_key] = int(time.time()) + self.ttl_duration\\"\\"        try:\\"            self.table.put_item(Item=item)\"        except Exception as error:\\"            Logger.logger.error(f'Error saving conversation to DynamoDB: {str(error)}')\"            raise\\"\\"        return self._remove_timestamps(trimmed_conversation)\\"\\"    async def fetch_chat(self, user_id: str, session_id: str, agent_id: str) -> List[ConversationMessage]:\\"        key = self._generate_key(user_id, session_id, agent_id)\\"        try:\\"            response = self.table.get_item(Key={\"PK": user_id, \"SK": key})\\"            stored_messages = self._dict_to_conversation(response.get('Item', {}).get('conversation', []))\\"            return self._remove_timestamps(stored_messages)\\"        except Exception as error:\\"            Logger.logger.error(f'Error getting conversation from DynamoDB: {str(error)}')\"            raise\\"\\"\\"}