from typing import List, Optional, Dict, Any\\nfrom anthropic import Anthropic\\nfrom multi_agent_orchestrator.utils.helpers import is_tool_input\\nfrom multi_agent_orchestrator.utils.logger import Logger\\nfrom multi_agent_orchestrator.types import ConversationMessage\\nfrom multi_agent_orchestrator.classifiers import Classifier, ClassifierResult\\nimport logging\\nlogging.getLogger(\\"httpx\\"\).setLevel(logging.WARNING)\\n\\nANTHROPIC_MODEL_ID_CLAUDE_3_5_SONNET = \\\"claude-3-5-sonnet-20240620\\"\\n\\nclass AnthropicClassifierOptions:\\n    def __init__(self, api_key: str, model_id: Optional[str] = None, inference_config: Optional[Dict[str, Any]] = None):\\n        self.api_key = api_key\\n        self.model_id = model_id\\n        self.inference_config = inference_config or {} \\n\\nclass AnthropicClassifier(Classifier):\\n    def __init__(self, options: AnthropicClassifierOptions):\\n        super().__init__()\\n\\n        if not options.api_key:\\n            raise ValueError(\\"Anthropic API key is required\\")\\n\\n        self.client = Anthropic(api_key=options.api_key)\\n        self.model_id = options.model_id or ANTHROPIC_MODEL_ID_CLAUDE_3_5_SONNET\\n\\n        default_max_tokens = 1000\\n        self.inference_config = {\\'max_tokens\': options.inference_config.get(\\'max_tokens\', default_max_tokens), \\n            \\'temperature\': options.inference_config.get(\\'temperature\', 0.0), \\n            \\'top_p\': options.inference_config.get(\\'top_p\', 0.9), \\n            \\'stop_sequences\': options.inference_config.get(\\'stop_sequences\', [])}\\n\\n        self.tools: List[Dict] = [\\n            {\\'name\': \\\"analyzePrompt\\\", \\n            \\'description\': \\\"Analyze the user input and provide structured output\\\", \\n            \\'input_schema\': {\\n                \\'type\': \\\"object\\\", \\n                \\'properties\': {\\n                    \\'userinput\': {\\n                        \\'type\': \\\"string\\\", \\n                        \\'description\': \\\"The original user input\\\"\\n                    }, \\n                    \\'selected_agent\': {\\n                        \\'type\': \\\"string\\\", \\n                        \\'description\': \\\"The name of the selected agent\\\"\\n                    }, \\n                    \\'confidence\': {\\n                        \\'type\': \\\"number\\\", \\n                        \\'description\': \\\"Confidence level between 0 and 1\\\"\\n                    }\\n                }, \\n                \\'required\': [\\\"userinput\\\", \\\"selected_agent\\\", \\\"confidence\\\"]\\n            }\\n        ]\\n\\n        self.system_prompt = \\\"You are an AI assistant.\\\"  # Add your system prompt here\\n\\n\\n    async def process_request(self, input_text: str, chat_history: List[ConversationMessage]) -> ClassifierResult:\\n        user_message = {\\