from typing import List, Optional, Dict, Any\\\nfrom anthropic import Anthropic\\\\\nfrom multi_agent_orchestrator.utils.helpers import is_tool_input\\\\\nfrom multi_agent_orchestrator.utils.logger import Logger\\\\\nfrom multi_agent_orchestrator.types import ConversationMessage\\\\\nfrom multi_agent_orchestrator.classifiers import Classifier, ClassifierResult\\\\nimport logging\\\\\nlogging.getLogger(\\"httpx\\"\).setLevel(logging.WARNING)\\\\n\\\\nANTHROPIC_MODEL_ID_CLAUDE_3_5_SONNET = \"claude-3-5-sonnet-20240620\"\\\\n\\\\nclass AnthropicClassifierOptions:\\\"\n    def __init__(self, api_key: str, model_id: Optional[str] = None, inference_config: Optional[Dict[str, Any]] = None):\\\"\n        self.api_key = api_key\\\"\n        self.model_id = model_id\\\"\n        self.inference_config = inference_config if inference_config is not None else {}\\\"\n\\\\nclass AnthropicClassifier(Classifier):\\\"\n    def __init__(self, options: AnthropicClassifierOptions):\\\"\n        super().__init__()\\\"\n\n        if not options.api_key:\\"\n            raise ValueError(\\"Anthropic API key is required\\")\\\"\n\n        self.client = Anthropic(api_key=options.api_key)\\\"\n        self.model_id = options.model_id or ANTHROPIC_MODEL_ID_CLAUDE_3_5_SONNET\\\"\n\n        default_max_tokens = 1000\\\"\n        self.inference_config = {\\"max_tokens\": options.inference_config.get(\\"max_tokens\", default_max_tokens), \\\"temperature\": options.inference_config.get(\\"temperature\", 0.0), \\\"top_p\": options.inference_config.get(\\"top_p\", 0.9), \\\"stop_sequences\": options.inference_config.get(\\"stop_sequences\", [])}\\\"\n\n        self.tools: List[Dict] = [\\"\n            {\\"name\": \\\"analyzePrompt\", \\\"description\": \\\"Analyze the user input and provide structured output\", \\\"input_schema\": {\n                \\\"type\": \\\"object\", \\\"properties\": {\n                    \\\"userinput\": {\n                        \\\"type\": \\\"string\", \\\"description\": \\\"The original user input\"\n                    }, \\\"selected_agent\": {\n                        \\\"type\": \\\"string\", \\\"description\": \\\"The name of the selected agent\"\n                    }, \\\"confidence\": {\n                        \\\"type\": \\\"number\", \\\"description\": \\\"Confidence level between 0 and 1\"\n                    }\n                }, \\\"required\": [\\\"userinput\", \\\"selected_agent\", \\\"confidence\"]\n            }\n        ]\n\n        self.system_prompt = \\\"You are an AI assistant.\\"  # Add your system prompt here\\"