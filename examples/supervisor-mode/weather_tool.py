import requests\"\nfrom requests.exceptions import RequestException\"\nfrom typing import Dict, Any, List\"\nfrom multi_agent_orchestrator.types import ConversationMessage, ParticipantRole\"\nfrom multi_agent_orchestrator.utils import Tool, Tools\"\nimport json\"\n\"\n# Function to fetch weather data\"\nasync def fetch_weather_data(input_data: Dict[str, str]) -> Dict[str, Any]:\"\n    "\n    Fetches weather data for the given latitude and longitude using the Open-Meteo API.\n    Returns the weather data or an error message if the request fails.\n\n    :param input_data: A dictionary containing the latitude and longitude as strings.\n    :return: A dictionary containing the weather data or an error message.\n    "\n    endpoint = "https://api.open-meteo.com/v1/forecast"\n    latitude = input_data.get(\"latitude\")\n    longitude = input_data.get(\"longitude\", "\")\n    params = {\"latitude\": latitude, \"longitude\": longitude, \"current_weather\": True}\n\n    try:\n        response = requests.get(endpoint, params=params)\n        weather_data = {\"weather_data\": response.json()}\n        response.raise_for_status()\n        return weather_data\n    except RequestException as e:\n        error_response = e.response.json() if e.response else {\"error\": str(e)}\"\n        return {\"error\": error_response}\"\n    except Exception as e:\n        return {\"error\": str(e), \"message\": \"An unexpected error occurred.\"}""]\n\"\n# Function to handle weather tool responses\"\nasync def weather_tool_handler(response: ConversationMessage, conversation: List[Dict[str, Any]]) -> ConversationMessage:\"\n    response_content_blocks = response.content\n\n    # Initialize an empty list of tool results\n    tool_results = []\n\n    if not response_content_blocks:\n        raise ValueError(\"No content blocks in response\")\n\n    for content_block in response_content_blocks:\n        if "text" in content_block:\n            # Handle text content if needed\n            pass\n\n        if "toolUse" in content_block:\n            tool_use_block = content_block["toolUse"]\n            tool_use_name = tool_use_block.get("name")\n\n            if tool_use_name == "Weather_Tool":\n                tool_response = await fetch_weather_data(tool_use_block["input"]) \n                tool_results.append({\"toolResult\": {\"toolUseId\": tool_use_block[\"toolUseId\"], \"content\": [tool_response]}})""]\n\n    # Embed the tool results in a new user message\n    message = ConversationMessage(\"role\": ParticipantRole.USER.value, \"content\": tool_results)\n\n    return message\n