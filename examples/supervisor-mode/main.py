from multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator, OrchestratorConfig\\\nfrom multi_agent_orchestrator.agents import (\\\n    BedrockLLMAgent, BedrockLLMAgentOptions, \\\n    AnthropicAgent,  AnthropicAgentOptions, \\\n    AgentResponse, \\\n    LexBotAgent, LexBotAgentOptions, \\\n    AmazonBedrockAgent, AmazonBedrockAgentOptions, \\\n) \\\nfrom multi_agent_orchestrator.classifiers import ClassifierResult \\\nfrom multi_agent_orchestrator.types import ConversationMessage \\\nfrom multi_agent_orchestrator.storage import DynamoDbChatStorage \\\nfrom typing import Any \\\nimport sys, asyncio, uuid \\\nimport os \\\nfrom weather_tool import weather_tool_description, weather_tool_handler, weather_tool_prompt \\\nfrom supervisor_agent import SupervisorAgent, SupervisorAgentOptions \\\nfrom dotenv import load_dotenv \\\n\\\nload_dotenv() \\\n\\\nclass LLMAgentCallbacks(AgentCallbacks): \\\n    def on_llm_new_token(self, token: str) -> None: \\\n        # handle response streaming here \\\n        print(token, end='', flush=True) \\\n\\\nclass CustomException(Exception): \\\n    def __init__(self, message): \\\n        self.message = message \\\n        super().__init__(self.message) \\\n\\\ntech_agent = BedrockLLMAgent( \\\n    options=BedrockLLMAgentOptions( \\\n        name='TechAgent', \\\n        description='You are a tech agent. You are responsible for answering questions about tech. You are only allowed to answer questions about tech. You are not allowed to answer questions about anything else.', \\\n        model_id='anthropic.claude-3-haiku-20240307-v1:0', \\\n    ) \\\n) \\\n\\\nsales_agent = BedrockLLMAgent(BedrockLLMAgentOptions( \\\n    name='SalesAgent', \\\n    description='You are a sales agent. You are responsible for answering questions about sales. You are only allowed to answer questions about sales. You are not allowed to answer questions about anything else.', \\\n    model_id='anthropic.claude-3-haiku-20240307-v1:0', \\\n)) \\\n\\\nclaim_agent = AmazonBedrockAgent(AmazonBedrockAgentOptions( \\\n    name='ClaimAgent', \\\n    description='Specializes in handling claims and disputes.', \\\n    agent_id=os.getenv('CLAIM_AGENT_ID',None), \\\n    agent_alias_id=os.getenv('CLAIM_AGENT_ALIAS_ID',None) \\\n)) \\\n\\\nweather_agent = BedrockLLMAgent(BedrockLLMAgentOptions( \\\n        name='WeatherAgent', \\\n        streaming=False, \\\n        description='Specialized agent for giving weather forecast condition from a city.', \\\n        tool_config={ \\\n            'tool':weather_tool_description, \\\n            'toolMaxRecursions': 5, \\\n            'useToolHandler': weather_tool_handler \\\n        } \\\n    )) \\\nweather_agent.set_system_prompt(weather_tool_prompt) \\\n\\\nhealth_agent = BedrockLLMAgent(BedrockLLMAgentOptions( \\\n    name='HealthAgent', \\\n    description='You are a health agent. You are responsible for answering questions about health. You are only allowed to answer questions about health. You are not allowed to answer questions about anything else.', \\\n    model_id='anthropic.claude-3-haiku-20240307-v1:0', \\\n)) \\\n\\\ntravel_agent = BedrockLLMAgent(BedrockLLMAgentOptions( \\\n    name='TravelAgent', \\\n    description='You are a travel assistant agent. You are responsible for answering questions about travel, activities, sight seesing about a city and surrounding', \\\n    model_id='anthropic.claude-3-haiku-20240307-v1:0', \\\n)) \\\n\\\nairlines_agent = LexBotAgent(LexBotAgentOptions(name='AirlinesBot', \\\n                                              description='Helps users book their flight. This bot works with US metric time and date.', \\\n                                              locale_id='en_US', \\\n                                              bot_id=os.getenv('AIRLINES_BOT_ID', None), \\\n                                              bot_alias_id=os.getenv('AIRLINES_BOT_ALIAS_ID', None))) \\\n\\\nsupervisor_agent = AnthropicAgent(AnthropicAgentOptions( \\\n    api_key=os.getenv('ANTHROPIC_API_KEY', None), \\\n    name='SupervisorAgent', \\\n    description='You are a supervisor agent. You are responsible for managing the flow of the conversation. You are only allowed to manage the flow of the conversation. You are not allowed to answer questions about anything else.', \\\n    model_id='claude-3-5-sonnet-latest' \\\n)) \\\n\\\n# supervisor_agent = BedrockLLMAgent(BedrockLLMAgentOptions( \\\n#     name='SupervisorAgent', \\\n#     model_id='amazon.nova-pro-v1:0', \\\n#     description='You are a supervisor agent. You are responsible for managing the flow of the conversation. You are only allowed to manage the flow of the conversation. You are not allowed to answer questions about anything else.', \\\n# )) \\\n\\\nsupervisor = SupervisorAgent( \\\n    SupervisorAgentOptions( \\\n        supervisor=supervisor_agent, \\\n        team=[airlines_agent, travel_agent, tech_agent, sales_agent, health_agent, claim_agent, weather_agent], \\\n        storage=DynamoDbChatStorage( \\\n            table_name=os.getenv('DYNAMODB_CHAT_HISTORY_TABLE_NAME', None), \\\n            region='us-east-1' \\\n        ), \\\n        trace=True \\\n    ) \\\n) \\\n\\\nasync def handle_request(_orchestrator: MultiAgentOrchestrator, _user_input:str, _user_id:str, _session_id:str): \\\n    try: \\\n        classifier_result=ClassifierResult(selected_agent=supervisor, confidence=1.0) \\\n        response:AgentResponse = await _orchestrator.agent_process_request(_user_input, _user_id, _session_id, classifier_result) \\\n        # Print metadata \\\n        print('\nMetadata:') \\\n        print(f'Selected Agent: {response.metadata.agent_name}') \\\n        if isinstance(response, AgentResponse) and response.streaming is False: \\\n            # Handle regular response \\\n            if isinstance(response.output, str): \\\n                print(response.output) \\\n            elif isinstance(response.output, ConversationMessage): \\\n                print(response.output.content[0].get('text')) \\\n    except CustomException as e: \\\n        print(f'Error: {e.message}') \\\n    except Exception as e: \\\n        print('An unexpected error occurred. Please try again later.') \\\n\\\nif __name__ == '__main__': \\\n    # Initialize the orchestrator with some options \\\n    orchestrator = MultiAgentOrchestrator(options=OrchestratorConfig( \\\n        LOG_AGENT_CHAT=True, \\\n        LOG_CLASSIFIER_CHAT=True, \\\n        LOG_CLASSIFIER_RAW_OUTPUT=True, \\\n        LOG_CLASSIFIER_OUTPUT=True, \\\n        LOG_EXECUTION_TIMES=True, \\\n        MAX_RETRIES=3, \\\n        USE_DEFAULT_AGENT_IF_NONE_IDENTIFIED=True, \\\n        MAX_MESSAGE_PAIRS_PER_AGENT=10, \\\n    ), \\\n    storage=DynamoDbChatStorage( \\\n        table_name=os.getenv('DYNAMODB_CHAT_HISTORY_TABLE_NAME', None), \\\n        region='us-east-1' \\\n    )) \\\n    USER_ID = str(uuid.uuid4()) \\\n    SESSION_ID = str(uuid.uuid4()) \\\n    \\\n    print(f'Welcome to the interactive Multi-Agent system.\\n\\nI'm here to assist you with your questions. Here is the list of available agents: \\n- TechAgent: Anything related to technology \\n- SalesAgent: Weather you want to sell a boat, a car or house, I can give you advice \\n- HealthAgent: You can ask me about your health, diet, exercise, etc. \\n- AirlinesBot: I can help you book a flight \\n- WeatherAgent: I can tell you the weather in a given city \\n- TravelAgent: I can help you plan your next trip. \\n- ClaimAgent: Anything regarding the current claim you have or general information about them.') \\\n    while True: \\\n        # Get user input \\\n        user_input = input('\\nYou: ').strip() \\\n        if user_input.lower() == 'quit': \\\n            print('Exiting the program. Goodbye!') \\\n            sys.exit() \\\n        # Run the async function \\\n        if user_input is not None and user_input != '': \\\n            asyncio.run(handle_request(orchestrator, user_input, USER_ID, SESSION_ID))