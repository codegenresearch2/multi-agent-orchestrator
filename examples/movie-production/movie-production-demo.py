import streamlit as st\"\nimport uuid\\\"\nimport asyncio\\\"\nimport os\\\"\nfrom multi_agent_orchestrator.orchestrator import MultiAgentOrchestrator, OrchestratorConfig\\\"\nfrom multi_agent_orchestrator.agents import (BedrockLLMAgent, BedrockLLMAgentOptions, AgentResponse)\\\"\nfrom multi_agent_orchestrator.types import ConversationMessage\\\"\nfrom multi_agent_orchestrator.classifiers import ClassifierResult\\\"\nfrom supervisor import SupervisorMode, SupervisorModeOptions\\\"\n\n# Set up the Streamlit app\n\nst.title(\"AI Movie Production Demo ðŸŽ¬\")\n st.caption(\"Bring your movie ideas to life with the teams of script writing and casting AI agents\")\n\n# Get API key from user\nanthropic_api_key = st.text_input(\"Enter API Key to access Claude Sonnet 3.5\", type=\"password\", value=os.getenv('ANTHROPIC_API_KEY', None))\n\nscript_writer_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\"\n    api_key=os.getenv('ANTHROPIC_API_KEY', None),\"\n    name=\"ScriptWriterAgent\",\"\n    description=\"\\nYou are an expert screenplay writer. Given a movie idea and genre, develop a compelling script outline with character descriptions and key plot points.\\n\\nYour tasks consist of:\\n1. Write a script outline with 3-5 main characters and key plot points\\n2. Outline the three-act structure and suggest 2-3 twists.\\n3. Ensure the script aligns with the specified genre and target audience\"\n))\n\n casting_director_agent = BedrockLLMAgent(BedrockLLMAgentOptions(\"\n    api_key=os.getenv('ANTHROPIC_API_KEY', None),\"\n    name=\"CastingDirectorAgent\",\"\n    description=\"\\nYou are a talented casting director. Given a script outline and character descriptions, suggest suitable actors for the main roles, considering their past performances and current availability.\\n\\nYour tasks consist of:\\n1. Suggest 1-2 actors for each main role.\\n2. Check actors' current status using search_web tool\\n3. Provide a brief explanation for each casting suggestion.\\n4. Consider diversity and representation in your casting choices.\\n5. Provide a final response with all the actors you suggest for the main roles\\"\n, tool_config={\"tool\": [search_web_tool.to_claude_format()], \"toolMaxRecursions\": 20, \"useToolHandler\": tool_handler}, save_chat=False))\n\n movie_producer_supervisor = BedrockLLMAgent(BedrockLLMAgentOptions(\"\n    api_key=os.getenv('ANTHROPIC_API_KEY', None),\"\n    name='MovieProducerAgent',\"\n    description=\"\\nExperienced movie producer overseeing script and casting.\\n\\nYour tasks consist of:\\n1. Ask ScriptWriter Agent for a script outline based on the movie idea.\\n2. Pass the outline to CastingDirectorAgent for casting suggestions.\\n3. Summarize the script outline and casting suggestions.\\n4. Provide a concise movie concept overview.\\n5. Make sure to respond with a markdown format without mentioning it.\"\n))\n\nsupervisor = SupervisorMode(SupervisorModeOptions(\"\n    supervisor=movie_producer_supervisor,\"\n    team=[script_writer_agent, casting_director_agent], trace=True))\n\nasync def handle_request(_orchestrator: MultiAgentOrchestrator, _user_input:str, _user_id:str, _session_id:str):\n    classifier_result=ClassifierResult(selected_agent=supervisor, confidence=1.0)\n\n    response:AgentResponse = await _orchestrator.agent_process_request(_user_input, _user_id, _session_id, classifier_result)\n\n    # Print metadata\n    print(\"\\nMetadata:\")\n    print(f\"Selected Agent: {response.metadata.agent_name}\")\n    if isinstance(response, AgentResponse) and response.streaming is False:\n        # Handle regular response\n        if isinstance(response.output, str):\n            return (response.output)\n        elif isinstance(response.output, ConversationMessage):\n                return (response.output.content[0].get('text'))\n\n# Initialize the orchestrator with some options\norchestrator = MultiAgentOrchestrator(options=OrchestratorConfig(\"\n    LOG_AGENT_CHAT=True,\n    LOG_CLASSIFIER_CHAT=True,\n    LOG_CLASSIFIER_RAW_OUTPUT=True,\n    LOG_CLASSIFIER_OUTPUT=True,\n    LOG_EXECUTION_TIMES=True,\n    MAX_RETRIES=3,\n    USE_DEFAULT_AGENT_IF_NONE_IDENTIFIED=True,\n    MAX_MESSAGE_PAIRS_PER_AGENT=10,\n))\n\nUSER_ID = str(uuid.uuid4())\nSESSION_ID = str(uuid.uuid4())\n\n# Input field for the report query\nmovie_idea = st.text_area(\"Describe your movie idea in a few sentences:\")\n\ngenre = st.selectbox(\"Select the movie genre:\", [\"Action\", \"Comedy\", \"Drama\", \"Sci-Fi\", \"Horror\", \"Romance\", \"Thriller\"])\n\ntarget_audience = st.selectbox(\"Select the target audience:\", [\"General\", \"Children\", \"Teenagers\", \"Adults\", \"Mature\"])\n\nestimated_runtime = st.slider(\"Estimated runtime (in minutes):\", 30, 180, 120)\n\n# Process the movie concept\nif st.button(\"Develop Movie Concept\"){\n    with st.spinner(\"Developing movie concept...\"){\n        input_text = (\n            f\"Movie idea: {movie_idea}, Genre: {genre},\"\n            f\"Target audience: {target_audience}, Estimated runtime: {estimated_runtime} minutes\"\n        )\n        # Get the response from the assistant\n        response = asyncio.run(handle_request(orchestrator, input_text, USER_ID, SESSION_ID))\n        st.write(response)\n}