from typing import Optional, Any, AsyncIterable, Union\\nfrom enum import Enum\\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\\nimport asyncio\\nfrom multi_agent_orchestrator.agents import Agent, AgentOptions, BedrockLLMAgent, AnthropicAgent\\nfrom multi_agent_orchestrator.types import ConversationMessage, ParticipantRole\\nfrom multi_agent_orchestrator.utils import Logger\\nfrom multi_agent_orchestrator.storage import ChatStorage, InMemoryChatStorage\\nfrom tool import Tool, ToolResult\\nfrom datetime import datetime, timezone\\n\\\nclass SupervisorType(Enum):\\n    BEDROCK = "BEDROCK"\\n    ANTHROPIC = "ANTHROPIC"\\\nclass SupervisorAgentOptions(AgentOptions):\\n    def __init__(self, supervisor:Agent = None, team: list[Agent] = None, storage: Optional[ChatStorage] = None, trace: Optional[bool] = None, **kwargs):\\n        super().__init__(name=supervisor.name if supervisor else None, description=supervisor.description if supervisor else None, **kwargs)\\n        self.supervisor = supervisor or None\\n        self.team = team or []\\n        self.storage = storage or InMemoryChatStorage()\\n        self.trace = trace or False\\\\nclass SupervisorAgent(Agent):\\"""\\n    SupervisorAgent class.\\n\\n    This class represents a supervisor agent that interacts with other agents in an environment. It inherits from the Agent class.\\n\\n    Attributes:\\\\n        supervisor_tools (list[Tool]): List of tools available to the supervisor agent.\\n        team (list[Agent]): List of agents in the environment.\\n        supervisor_type (str): Type of supervisor agent (BEDROCK or ANTHROPIC).\\n        user_id (str): User ID.\\n        session_id (str): Session ID.\\n        storage (ChatStorage): Chat storage for storing conversation history.\\n        trace (bool): Flag indicating whether to enable tracing.\\n\\n    Methods:\\\\n        __init__(self, options: SupervisorAgentOptions): Initializes a SupervisorAgent instance.\\n        send_message(self, agent: Agent, content: str, user_id: str, session_id: str, additionalParameters: dict) -> str: Sends a message to an agent.\\n        send_messages(self, messages: list[dict[str, str]]) -> str: Sends messages to multiple agents in parallel.\\n        get_current_date(self) -> str: Gets the current date.\\n        supervisor_tool_handler(self, response: Any, conversation: list[dict[str, Any]]) -> Any: Handles the response from a tool.\\n        _process_tool(self, tool_name: str, input_data: dict) -> Any: Processes a tool based on its name.\\n        process_request(self, input_text: str, user_id: str, session_id: str, chat_history: list[ConversationMessage], additional_params: Optional[dict[str, str]] = None) -> Union[ConversationMessage, AsyncIterable[Any]]: Processes a user request.\"""\\\\n    supervisor_tools: list[Tool] = [Tool(\\\\n        name='send_messages',\\\\n        description='Send a message to a one or multiple agents in parallel.',\\\\n        properties={\\"\"messages": {\\"\"type": "array",\\"\"items": {\\"\"type": "object",\\"\"properties": {\\"\"recipient": {\\"\"type": "string",\\"\"description": "The name of the agent to send the message to."}\\",\\"\"content": {\\"\"type": "string",\\"\"description": "The content of the message to send."}\\"}},\\"\"required": ["recipient", "content"]}\\"},\\"\"required": ["messages"]\\"}),\\\\n    Tool(\\\\n        name="get_current_date",\\\\n        description="Get the date of today in US format.",\\\\n        properties={},\\\\n        required=[]\\")\"""]\\\\n\\\n    def __init__(self, options: SupervisorAgentOptions):\\\\n        super().__init__(options)\\\n        self.supervisor = options.supervisor\\\\n        self.team = options.team\\\\n        self.supervisor_type = SupervisorType.BEDROCK.value if isinstance(self.supervisor, BedrockLLMAgent) else SupervisorType.ANTHROPIC.value\\\\n        if not self.supervisor.tool_config:\\\\n            self.supervisor.tool_config = {\\"\"tool": [tool.to_bedrock_format() if self.supervisor_type == SupervisorType.BEDROCK.value else tool.to_claude_format() for tool in SupervisorAgent.supervisor_tools], \\"\"toolMaxRecursions": 40, \\"\"useToolHandler": self.supervisor_tool_handler}\\"}\\\n        else:\\\\n            raise RuntimeError('Supervisor tool config already set. Please do not set it manually.')\\\\n\\\n        self.user_id = ''\\\\n        self.session_id = ''\\\\n        self.storage = options.storage or InMemoryChatStorage()\\\\n        self.trace = options.trace\\\\n\\\n        tools_str = ",".join(f"{tool.name}:{tool.func_description}" for tool in SupervisorAgent.supervisor_tools) \\\\n        agent_list_str = "\n".join(\\""