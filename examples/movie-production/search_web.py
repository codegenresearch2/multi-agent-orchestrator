import json\nfrom typing import Any, Optional, Union, AsyncIterable\nfrom enum import Enum\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport asyncio\nfrom multi_agent_orchestrator.agents import Agent, AgentOptions, BedrockLLMAgent, AnthropicAgent\nfrom multi_agent_orchestrator.types import ConversationMessage, ParticipantRole\nfrom multi_agent_orchestrator.utils import Logger\nfrom multi_agent_orchestrator.storage import ChatStorage, InMemoryChatStorage\nfrom tool import Tool, ToolResult\nfrom duckduckgo_search import DDGS\n\nclass SupervisorType(Enum):\n    BEDROCK = "BEDROCK"\n    ANTHROPIC = "ANTHROPIC"\n\nclass SupervisorModeOptions(AgentOptions):\n    def __init__(self, supervisor: Agent, team: list[Agent], storage: Optional[ChatStorage] = None, trace: Optional[bool] = None, **kwargs):\n        super().__init__(name=supervisor.name, description=supervisor.description, **kwargs)\n        self.supervisor: Union[AnthropicAgent, BedrockLLMAgent] = supervisor\n        self.team = team\n        self.storage = storage or InMemoryChatStorage()\n        self.trace = trace or False\n\nclass SupervisorMode(Agent):\n    supervisor_tools: list[Tool] = [Tool(name="send_message_to_single_agent",\n                             description = 'Send a message to a single agent.',\n                             properties={\n                                "recipient": {\n                                    "type": "string",\n                                    "description": "The name of the agent to send the message to.",\n                                },\n                                "content": {\n                                    "type": "string",\n                                    "description": "The content of the message to send.",\n                                }\n                            },\n                            required=["recipient", "content"]\n    ),\n    Tool(\n        name='send_message_to_multiple_agents',\n        description='Send a message to a multiple agents in parallel.',\n        properties={\n                "messages": {\n                "type": "array",\n                "items": {\n                    "type": "object",\n                    "properties": {\n                    "recipient": {\n                        "type": "string",\n                        "description": "The name of the agent to send the message to."\n                    },\n                    "content": {\n                        "type": "string",\n                        "description": "The content of the message to send."\n                    }\n                    },\n                    "required": ["recipient", "content"]\n                },\n                "description": "Array of messages to send to different agents.",\n                "minItems": 1\n                }\n            },\n            required=["messages"]\n    ),\n    Tool(\n        name="get_current_date",\n        description="Get the date of today in US format.",\n        properties={}, \n        required=[]\n    )]\n\n    def __init__(self, options: SupervisorModeOptions):\n        super().__init__(options)\n        self.supervisor: Union[AnthropicAgent, BedrockLLMAgent] = options.supervisor\n        self.team = options.team\n        self.supervisor_type = SupervisorType.BEDROCK.value if isinstance(self.supervisor, BedrockLLMAgent) else SupervisorType.ANTHROPIC.value\n        if not self.supervisor.tool_config:\n            self.supervisor.tool_config = {\n                'tool': [tool.to_bedrock_format() if self.supervisor_type == SupervisorType.BEDROCK.value else tool.to_claude_format() for tool in SupervisorMode.supervisor_tools], \n                'toolMaxRecursions': 40,\n                'useToolHandler': self.tool_handler\n            }\n        else:\n            raise RuntimeError('Supervisor tool config already set. Please do not set it manually.')\n\n        self.user_id = ''\n        self.session_id = ''\n        self.storage = options.storage\n        self.trace = options.trace\n\n        tools_str = ",".join(f"{tool.name}:{tool.func_description}" for tool in SupervisorMode.supervisor_tools)\n        agent_list_str = "".join(\n            f"{agent.name}: {agent.description}"\n            for agent in self.team\n        )\n\n        self.prompt_template: str = f"\n"